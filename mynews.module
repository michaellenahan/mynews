<?php

/**
 * @file
 * My news.
 */

/**
 * Implements hook_menu().
 */
function mynews_menu() {
  $items['newsletter'] = array(
    'title' => 'Newsletter registration page',
    'page callback' => '_mynews_newsletter_registration_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Page callback for 'newsletter'.
 */
function _mynews_newsletter_registration_page() {
dpm($_POST);
dpm($_POST['mail']);
  $retval = "";
  $retval .= "<pre>";
  $retval .= print_r($_POST['mail'], TRUE);
  $retval .= "</pre>";
  return $retval;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mynews_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():
  $blocks['mynews'] = array(
    // info: The name of the block.
    'info' => t('My news'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mynews_block_view($delta = '') {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'mynews':
      $block['subject'] = t('My news');
      $block['content'] = drupal_get_form('mynews_form');
      break;
  }
  return $block;
}

/**
 * The mynews subscription form.
 */
function mynews_form() {
  $form['#action'] = 'newsletter';

  $form['mail'] = array(
    '#type'           => 'textfield',
    '#maxlength'      => 255,
    '#size'           => 25,
    '#element_validate' => array('mynews_email_validate'),
    '#attributes'     => array('class' => array('edit-mail')),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => 'Subscribe',
  );

  return $form;
}

/**
 * Element validate callback for the 'mail' field.
 */
function mynews_email_validate($element, &$form_state, $form) {
  if (empty($element['#value']) || !valid_email_address($element['#value'])) {
    form_set_error($element['#name'],
      t("Invalid e-mail address '@submitted_email'. Please verify your syntax.",
        array('@submitted_email' => check_plain($element['#value'])))
    );
  }
}
